<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Get Out of Uncomfortable Situations</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #e0f7fa;
            margin: 0;
        }
        .container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            width: 100%;
            text-align: center;
        }
        .container h1 {
            margin-bottom: 20px;
            color: #00796b;
        }
        .container label {
            display: block;
            margin-bottom: 8px;
            color: #00796b;
            font-weight: bold;
        }
        .container input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #b2dfdb;
            border-radius: 6px;
            box-sizing: border-box;
        }
        .container button {
            width: 100%;
            padding: 12px;
            background-color: #00796b;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }
        .container button:hover {
            background-color: #004d40;
        }
        .container #call {
            margin-top: 20px;
        }
        .container .volume-control {
            margin-top: 15px;
        }
        .container .aggressiveness-control {
            margin-top: 15px;
        }
        .container .output-volume-control {
            margin-top: 15px;
        }
        .container .gender-control {
            margin-top: 15px;
        }
    </style>
    <script src="/server.js"></script>
</head>
<body>
    <div class="container">
        <h1>Get Out of Uncomfortable Situations</h1>
        <label for="situation">Describe your situation:</label>
        <input type="text" id="situation" placeholder="e.g., Uber ride, awkward date">
       
        <label for="impersonate">Who should we impersonate?</label>
        <input type="text" id="impersonate" placeholder="e.g., Dad, Boss">
       
        <label for="volume">Volume:</label>
        <input type="range" id="volume" min="0" max="1" step="0.1" value="0.5" class="volume-control">




        <label for="aggressiveness">Aggressiveness:</label>
        <input type="range" id="aggressiveness" min="0" max="1" step="0.1" value="0.5" class="aggressiveness-control">




        <label for="output-volume">Output Volume:</label>
        <input type="range" id="output-volume" min="0" max="1" step="0.1" value="0.5" class="output-volume-control">




        <label for="gender">Voice Gender:</label>
        <select id="gender" class="gender-control">
            <option value="male">Male</option>
            <option value="female">Female</option>
        </select>
       
        <button onclick="startCall()">Start Call</button>
       
        <div id="call" style="display:none;">
            <p id="conversation"></p>
            <audio id="ringtone" src="telephon-155035.mp3" preload="auto"></audio>
        </div>
    </div>








    <script>
        async function startCall() {
            const situation = document.getElementById('situation').value;
            const impersonate = document.getElementById('impersonate').value;
            const volume = document.getElementById('volume').value;
            const aggressiveness = document.getElementById('aggressiveness').value;
            const outputVolume = document.getElementById('output-volume').value;
            const gender = document.getElementById('gender').value;
            const conversation = document.getElementById('conversation');
            const callDiv = document.getElementById('call');
            const ringtone = document.getElementById('ringtone');
            API_KEY = "AIzaSyDIfl7WmzaXD7ToLFgfJZUl_DrzlUEapOc"
           
            if (situation && impersonate) {
                callDiv.style.display = 'block';
                conversation.innerHTML = `Calling as your ${impersonate}...<br><br>`;
               
                ringtone.volume = volume;
                ringtone.play();
               
                try {
                    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${API_KEY}`
                        },
                        body: JSON.stringify({
                            prompt: `Generate a dynamic, context-sensitive dialogue for impersonating ${impersonate} in a situation like ${situation}. Make it conversational, add characteristics to the voice, and allow for granular control over responses. Adjust the tone to be ${aggressiveness * 100}% aggressive.`,
                            max_tokens: 150
                        })
                    });
                    const data = await response.json();
                    const aiResponse = data.choices[0].text.trim();
                   
                    ringtone.onended = () => {
                        const utterance = new SpeechSynthesisUtterance(aiResponse);
                        utterance.pitch = gender === 'male' ? 0.8 : 1.2; // Adjust pitch for masculine or feminine voice
                        utterance.rate = gender === 'male' ? 0.9 : 1.1; // Adjust rate for masculine or feminine voice
                        utterance.volume = outputVolume; // Set volume for the generated dialogue
                        const voices = speechSynthesis.getVoices();
                        utterance.voice = voices.find(voice => voice.lang === 'en-US' && voice.name.includes(gender === 'male' ? 'Male' : 'Female')) || voices[0]; // Select a human-like voice based on gender
                        speechSynthesis.speak(utterance);
                    };
                } catch (error) {
                    conversation.innerHTML += 'Error generating response. Please try again.';
                }
            } else {
                alert('Please fill in both fields.');
            }
        }
    </script>
</body>
</html>
